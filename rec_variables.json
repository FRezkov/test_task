{
    "config_file": "/home/ubuntu/reconsil_test/database.ini",
    "section": "test",
    "schema_raw": "raw",
    "schema_stg": "stage",
    "schema_ods": "ods",
    "src_table1": "tb_operations_source",
    "src_table2": "tb_operations_target",
    "res_table": "tb_operations_result",
    "trg_table": "tb_operations",
    "drop_schema": "drop schema if exists {} cascade",
    "create_schm_query": "create schema if not exists {}",
    "drop_table": "drop table if exists {0}.{1} cascade",
    "create_tbl_query": "\n    create table if not exists {0}.{1} (\n            id uuid not null,\n            operation_type text,\n            operation_date timestamp without time zone,\n            user_id uuid,\n            amount numeric,\n            load_dttm timestamp\n            ) PARTITION BY HASH ({2})\n",
    "create_tbl_partition": "\n    CREATE TABLE IF NOT EXISTS {0}.{1}_{2} PARTITION OF {0}.{1}\n    FOR VALUES WITH (MODULUS {3}, REMAINDER {2})\n",
    "create_tbl_def_partition": "\n    CREATE TABLE IF NOT EXISTS {0}.{1}_def PARTITION OF {0}.{1} DEFAULT\n",
    "create_result_tbl_query": "\n    create table if not exists {0}.{1} (\n            id uuid not null PRIMARY KEY,\n            operation_type text,\n            operation_date timestamp without time zone,\n            user_id uuid,\n            amount numeric,\n            tolerance numeric,\n            diff jsonb,\n            load_dttm timestamp\n            ) \n",
    "create_fnl_tbl_query": "\n    create table if not exists {0}.{1} (\n            id uuid not null PRIMARY KEY,\n            operation_type text,\n            operation_date timestamp without time zone,\n            user_id uuid,\n            amount numeric,\n            load_dttm timestamp\n            )\n",
    "row_count": 9000000,
    "rows_per_partition": 1000000,
    "pk": "id",
    "start_ts": "2020-12-10 20:00:00",
    "end_ts": "2021-02-06 20:00:00",
    "test_data_src_fill": "\ninsert into {0}.{1} (id, operation_type, operation_date, user_id, amount, load_dttm)\nselect uuid_in(md5(random()::text|| clock_timestamp()::text||random()::text)::cstring) as id,\n       CASE WHEN RANDOM() > 0.6 THEN 'withdrawal'\n            ELSE 'deposit' end as operation_type,\n       timestamp '{2}' +\n       random() * (timestamp '{3}' - \n                   timestamp '{2}') as operation_date,\n       uuid_in(md5((random()*{4})::int::text)::cstring) as user_id,\n       CASE WHEN RANDOM() > 0.6 THEN (RANDOM()* 2000)\n            ELSE (RANDOM()* 2500) end as amount,\n       current_timestamp::timestamp as load_dttm\n  from generate_series({5},{6}) gs\n",
    "get_tbl_partition": "\n    SELECT tableoid::regclass::text AS prt FROM {}.{} GROUP BY prt\n",
    "test_data_trg_fill": "\ninsert into {} (id, operation_type, operation_date, user_id, amount, load_dttm)\nselect * from {}\n",
    "trg_tbl_random_delete": "\n    delete from {0}.{1}\n     where ctid = any(array(\n           select ctid\n             from {0}.{1}\n           tablesample bernoulli (1) ))\n",
    "trg_tbl_random_update": "\n    update {0}.{1}\n            set amount = (case when amount < 500\n                                      then amount*random()* 20\n                                      else amount end),\n                operation_type = (case when amount between 500 and 1500\n                                      then 'trade' \n                                      else operation_type end),\n                operation_date = (case when amount between 1000 and 3000\n                                      then clock_timestamp()\n                                      else operation_date end)\n            where ctid = any(array(\n              select ctid\n              from {0}.{1}\n              tablesample bernoulli (1) ))\n",
    "create_tbl_pk": "\n    alter table {0}.{1} add unique ({2})\n",
    "reconsil_query": "\n        insert into {0}.{1} (id, operation_type, operation_date, user_id, amount, tolerance, diff, load_dttm)\n        select id,\n               s.operation_type, \n               s.operation_date, \n               s.user_id,\n               s.amount,\n               round(100 - (least(t.amount, s.amount)/GREATEST(s.amount, t.amount))*100, 4) as tolerance,\n               case when (s.operation_type <> t.operation_type) then jsonb_build_object('operation_type', array[s.operation_type, t.operation_type]) else '{{}}'::jsonb end ||\n               case when (s.operation_date <> t.operation_date) then jsonb_build_object('operation_date', array[s.operation_date, t.operation_date]) else '{{}}'::jsonb end ||\n               case when (s.amount <> t.amount) then jsonb_build_object('amount', array[s.amount, t.amount]) else '{{}}'::jsonb end as diff,\n               current_timestamp::timestamp as load_dttm\n          from {2} s\n          join {3} t using(id)\n",
    "final_query": "\n        insert into {0}.{1} (id, operation_type, operation_date, user_id, amount, load_dttm)\n        select id, \n               operation_type, \n               operation_date, \n               user_id, \n               amount, \n               current_timestamp as load_dttm \n          from {2}.{3} \n         where diff = '{{}}'::jsonb and tolerance < {4}\n",
    "tolerance": 0.4,
    "max_workers": 5
}
